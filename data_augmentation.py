# -*- coding: utf-8 -*-
"""data_augmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSQqGsuGk3H775AGqCp2ChDPPG8JNMSh
"""

import cv2
import imgaug
import imageio
import os
import numpy as np
from imgaug import augmenters as iaa
from sklearn.model_selection import train_test_split
import glob
import shutil

class DataAugmentation:
    def __init__(self, root_dir="", output_dir=""):
        self.root_dir = root_dir
        self.output_dir = output_dir
        print("Instance of the DataAugmentation class created")

    def augmentation_of_image(self, test_image, output_path):
        self.test_image = test_image
        self.output_path = output_path

        # Define the augmenters
        rotate = iaa.Affine(rotate=(-60,60))
        scale = iaa.Affine(scale={"x": (0.7, 1.3), "y": (0.7,1.3)})
        translation = iaa.Affine(translate_percent={"x": (-0.2, 0.2), "y": (-0.2, 0.2)})
        shear = iaa.Affine(shear=(-3, 3))
        zoom = iaa.PerspectiveTransform(scale=(0.01, 0.15), keep_size=True)
        h_flip = iaa.Fliplr(1.0)
        v_flip = iaa.Flipud(1.0)
        padding = iaa.KeepSizeByResize(iaa.CropAndPad(percent=(0.05, 0.25)))

        # More augmentations
        blur = iaa.GaussianBlur(sigma=(0, 1.22))
        contrast = iaa.contrast.LinearContrast((0.75, 1.5))
        contrast_channels = iaa.LinearContrast((0.75, 1.5), per_channel=True)
        sharp_func = iaa.Sharpen(alpha=(0.3, 0.7), lightness=(0.8, 1.4))
        gauss_noise = iaa.AdditiveGaussianNoise(scale=0.111*255, per_channel=True)
        laplace_noise = iaa.AdditiveLaplaceNoise(scale=(0, 0.111*255))

        # Brightness
        brightness = iaa.Multiply((0.35,1.65))
        brightness_channels = iaa.Multiply((0.5, 1.5), per_channel=0.75)

        # Channels
        green = iaa.WithChannels(1, iaa.Add((20, 90)))
        green_rot = iaa.WithChannels(1, iaa.Affine(rotate=(0, 60)))
        blue = iaa.WithChannels(2, iaa.Add((20, 90)))
        blue_rot = iaa.WithChannels(2, iaa.Affine(rotate=(0, 60)))

        # Colors
        channel_shuffle = iaa.ChannelShuffle(1.0)
        grayscale = iaa.Grayscale(1.0)
        hue_n_saturation = iaa.MultiplyHueAndSaturation((0.6, 1.4), per_channel=True)
        add_hue_saturation = iaa.AddToHueAndSaturation((-60, 60), per_channel=True)

        # Quantize colors using k-Means clustering
        kmeans_color = iaa.KMeansColorQuantization(n_colors=(5, 15))

        # Contrast augmentors
        clahe = iaa.CLAHE(tile_grid_size_px=((3, 21),[0,2,3,4,5,6,7]))
        histogram = iaa.HistogramEqualization()

        # Augmentation list of metadata augmentors
        green_func = iaa.OneOf([green])
        blue_func = iaa.OneOf([blue])
        contrast_func = iaa.OneOf([contrast, brightness, brightness_channels])
        aug_func = iaa.SomeOf(2, [rotate, scale, translation, shear, h_flip, v_flip], random_order=True)
        clahe_func = iaa.SomeOf(2, [clahe, iaa.CLAHE(clip_limit=(2, 10)), iaa.CLAHE(tile_grid_size_px=(4, 20)), iaa.GammaContrast((1.0, 3.0)), iaa.AllChannelsCLAHE(), iaa.AllChannelsCLAHE(clip_limit=(1, 10), per_channel=True)], random_order=True)
        edge_func = iaa.OneOf([iaa.EdgeDetect(alpha=(0, 0.4)), iaa.DirectedEdgeDetect(alpha=(0.4, 1.0))])
        canny_func = iaa.OneOf([iaa.Canny(), iaa.Canny(alpha=(0.6, 0.9), sobel_kernel_size=[2, 8])])
        color_func = iaa.OneOf([channel_shuffle, grayscale, hue_n_saturation, add_hue_saturation, kmeans_color])
        flip_func = iaa.OneOf([histogram, v_flip, h_flip])

        # Define the augmentors used in the DA
        Augmentors = [aug_func, canny_func, color_func, sharp_func, contrast_func, green_func, clahe_func, blue_func, flip_func, edge_func]

        # Apply each augmentor
        for augmenter in Augmentors:
            augmented_image = augmenter.augment_image(self.test_image)
            output_filename = os.path.join(self.output_path, f"augmented_{augmenter.name}_{os.path.basename(self.test_image)}")
            imageio.imwrite(output_filename, augmented_image)

class DataAugmentation_Extension:
    def __init__(self, directories=[]):
        self.directories = directories
        print("Instance of DataAugmentation_Extension class created")

    def printnow(self, dir):
        print("Just testing that the method calling is working " + dir)

    def extend_dataset(self):
        for directory in self.directories:
            # Create an instance of the class
            library_augment = DataAugmentation()
            if not os.path.exists(directory):
                print(f"ERROR! Couldn't find directory: {directory}")
            else:
                print(f"Directory exists: {directory}")
                for file in os.listdir(directory):
                    classes_path = os.path.join(directory, file)
                    class_files = [name for name in glob.glob(os.path.join(classes_path, '*.bmp'))]
                    print(class_files)
                    for i in range(len(class_files)):
                        library_augment.augmentation_of_image(class_files[i], classes_path)

# Directories to be augmented
root_dirs = [
    r"C:\Users\nitin\Desktop\Cervical_Cancer_Detection\SIPaKMeD_224x224\train",
    r"C:\Users\nitin\Desktop\Cervical_Cancer_Detection\SIPaKMeD_512x512\train",
    r"C:\Users\nitin\Desktop\Cervical_Cancer_Detection\SIPaKMeD_1024x1024\train"
]

# Create an instance of the DataAugmentation_Extension class
data_augment_ext = DataAugmentation_Extension(directories=root_dirs)

# Extend the dataset for all directories
data_augment_ext.extend_dataset()

