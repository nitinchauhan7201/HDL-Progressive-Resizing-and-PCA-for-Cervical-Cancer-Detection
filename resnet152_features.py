# -*- coding: utf-8 -*-
"""ResNet152_Features.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uj4cQ60jKoUzFEgiwsAA-lUJq99kfNqA
"""

### MODELS
import numpy as np
from keras.layers import Dense, GlobalMaxPool2D, BatchNormalization, Dropout
from keras.applications.resnet import ResNet152
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model, Sequential
from tensorflow.keras.optimizers import Adam
from keras.callbacks import EarlyStopping
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from tensorflow.keras import layers
from tensorflow.keras.utils import load_img
from tensorflow.keras.utils import img_to_array
from numpy import expand_dims
import matplotlib.pyplot as plt
from matplotlib import pyplot

def Resnet152(seed = None):
    resNet = ResNet152(weights="imagenet", include_top=False)
    for layer in resNet.layers[:121]:
        layer.trainable = False
    for layer in resNet.layers[121:]:
        layer.trainable = True
    y = (resNet.get_layer("conv4_block1_1_conv")).output
    mx_y = GlobalMaxPool2D()(y)
    x = BatchNormalization()(mx_y)
    x = Dropout(.5)(x)
    x = Dense(1024, activation='relu', name="dense_1024")(x)
    x = BatchNormalization()(x)
    x = Dropout(.5)(x)
    preds = Dense(5,activation='softmax')(x)
    model = Model(inputs=resNet.input,outputs=preds)
    return model

"""LOAD DATA"""
# path to folder with data
import os
os.getcwd()
os.chdir(r"C:\Users\nitin\Desktop\Cervical_Cancer_Detection")
path = "\SIPaKMeD_224x224"

# expected data structure inside folder: train, test, val. in each folder: one folder for each class,
train_datagen = ImageDataGenerator(featurewise_center=False,
                                   rotation_range = 20, fill_mode="nearest",
                                   zoom_range=[1/1.2, 1/1.2], width_shift_range=0.2, height_shift_range=0.2,
                                   horizontal_flip = True, vertical_flip=True,
                                   brightness_range=[0.4, 1.4], channel_shift_range=20)

DA_IDG = ImageDataGenerator()

# in training set: use data augmentation image data generator, for validation and test: no data augmentation.
training_set_224 = train_datagen.flow_from_directory(path+"train\",
                                                target_size=(224, 224), # typical imagenet dimensions
                                                color_mode='rgb',
                                                batch_size=64,
                                                class_mode='categorical', shuffle=True)

validation_set_224 = DA_IDG.flow_from_directory(path+"val\",
                                                target_size=(224, 224),
                                                color_mode='rgb',
                                                class_mode='categorical',
                                                shuffle=True)

test_set_224 = DA_IDG.flow_from_directory(path+"test\",
                                                target_size=(224, 224),
                                                color_mode='rgb',
                                                batch_size=1,
                                                class_mode='categorical',
                                                shuffle=False)

###############################################################################################

# path to folder with data
path = "\SIPaKMeD_512x512"

# expected data structure inside folder: train, test, val. in each folder: one folder for each class,
training_set_512 = train_datagen.flow_from_directory(path+"train\",
                                                target_size=(512, 512), # typical imagenet dimensions
                                                color_mode='rgb',
                                                batch_size=64,
                                                class_mode='categorical', shuffle=True)

validation_set_512 = DA_IDG.flow_from_directory(path+"val\",
                                                target_size=(512, 512),
                                                color_mode='rgb',
                                                class_mode='categorical',
                                                shuffle=True)

test_set_512 = DA_IDG.flow_from_directory(path+"test\",
                                                target_size=(512, 512),
                                                color_mode='rgb',
                                                batch_size=1,
                                                class_mode='categorical',
                                                shuffle=False)

###############################################################################################

# path to folder with data
path = "\SIPaKMeD_1024x1024"

# expected data structure inside folder: train, test, val. in each folder: one folder for each class,
training_set_1024 = train_datagen.flow_from_directory(path+"train\",
                                                target_size=(1024, 1024), # typical imagenet dimensions
                                                color_mode='rgb',
                                                batch_size=64,
                                                class_mode='categorical', shuffle=True)

validation_set_1024 = DA_IDG.flow_from_directory(path+"val\",
                                                target_size=(1024, 1024),
                                                color_mode='rgb',
                                                class_mode='categorical',
                                                shuffle=True)

test_set_1024 = DA_IDG.flow_from_directory(path+"test\",
                                                target_size=(1024, 1024),
                                                color_mode='rgb',
                                                batch_size=1,
                                                class_mode='categorical',
                                                shuffle=False)
###############################################################################################

"""CREATE & TRAIN MODELS"""
model_resnet152 = Resnet152()

#For First Iteration
epochs = 100
opt = Adam(learning_rate=1e-4)
model_resnet152.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['acc'])
model_resnet152.fit_generator(generator=training_set_224, epochs=epochs, validation_data=validation_set_224, verbose=2)
model_resnet152.save_weights("resnet152_iteration1.h5")

"""EVALUATE PERFORMANCE ON THE TEST SET"""
y_test_224 = test_set_224.classes
pred_224 = np.argmax(model_resnet152.predict(test_set_224, steps = None), axis=1)
print(accuracy_score(y_test_224, pred_224))
print(confusion_matrix(y_test_224, pred_224))
print(classification_report(y_test_224, pred_224))

#For Second Iteration
opt = Adam(learning_rate=1e-4)
model_resnet152.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['acc'])
model_resnet152.fit_generator(generator=training_set_512, epochs=epochs, validation_data=validation_set_512, verbose=2)
model_resnet152.save_weights("resnet152_iteration2.h5")

"""EVALUATE PERFORMANCE ON THE TEST SET"""
y_test_512 = test_set_512.classes
pred_512 = np.argmax(model_resnet152.predict(test_set_512, steps = None), axis=1)
print(accuracy_score(y_test_512, pred_512))
print(confusion_matrix(y_test_512, pred_512))
print(classification_report(y_test_512, pred_512))

#For Third Iteration
opt = Adam(learning_rate=1e-4)
model_resnet152.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['acc'])
model_resnet152.fit_generator(generator=training_set_1024, epochs=epochs, validation_data=validation_set_512, verbose=2)
model_resnet152.save_weights("resnet152_iteration2.h5")

"""EVALUATE PERFORMANCE ON THE TEST SET"""
y_test_1024 = test_set_1024.classes
pred_1024 = np.argmax(model_resnet152.predict(test_set_1024, steps = None), axis=1)
print(accuracy_score(y_test_1024, pred_1024))
print(confusion_matrix(y_test_1024, pred_1024))
print(classification_report(y_test_1024, pred_1024))